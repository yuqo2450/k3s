---
# tasks file for install
# code: language=ansible
- name: Set k3s prerequisites
  block:
    - name: Install required packages
      ansible.builtin.apt:
        name: ['open-iscsi', 'curl', 'nfs-common', 'util-linux']
        state: present
      when: ansible_distribution in ['Debian', 'Ubuntu']

    - name: Allow ipv4 forwarding
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present

    - name: Allow ipv6 forwarding
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.forwarding
        value: 1
        state: present

    - name: Accept ipv6 router advertisment
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.accept_ra
        value: 2
        state: present

    - name: Load kernel module br_netfilter
      community.general.modprobe:
        name: br_netfilter
        state: present

- name: Install k3s binary
  ansible.builtin.get_url:
    url: "https://github.com/k3s-io/k3s/releases/download/{{ version }}+k3s1/k3s{{ (facter_os.architecture not in ['amd64', 'aarch64']) | ternary(facter_os.architecture, (facter_os.architecture == 'amd64') | ternary('', 'aarch64')) }}" # noqa: yaml[line-length]
    dest: "{{ bin }}"
    owner: root
    group: root
    mode: 0755

- name: Ensure k3s config directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  loop: "{{ k3s_config_dirs }}"

- name: Configure k3s service
  ansible.builtin.template:
    dest: /lib/systemd/system/k3s.service
    src: k3s.service.j2
    owner: root
    group: root
    mode: 0644

- name: Determine cluster master
  ansible.builtin.set_fact:
    server: "{{ ((server is defined) and (server | length > 0)) | ternary(server, inventory_hostname) }}"
  run_once: true

- name: Ensure cluster is initialized
  ansible.builtin.wait_for:
    host: "{{ server }}"
    port: 6443
    state: started
    timeout: 5
  ignore_errors: true
  register: cluster_initialized

- name: Initialize cluster on master
  run_once: true
  when: cluster_initialized.failed
  delegate_to: "{{ (server in groups['k3s-server']) | ternary(server, inventory_hostname) }}"
  block:
    - name: Ensure init config
      ansible.builtin.template:
        dest: /etc/rancher/k3s/config.yaml.d/00_cluster_init.yaml
        src: config/00_cluster_init.yaml.j2
        owner: root
        group: root
        mode: 0644

    - name: Configure kube-vip cluster loadbalancer
      ansible.builtin.template:
        dest: /var/lib/rancher/k3s/server/manifests/lb.yaml
        src: kubevip/lb.yaml.j2
        owner: root
        group: root
        mode: 0644
      when: not server in groups['k3s-server']

    - name: Configure kube-vip service loadbalancer
      ansible.builtin.template:
        dest: /var/lib/rancher/k3s/server/manifests/svclb.yaml
        src: kubevip/svclb.yaml.j2
        owner: root
        group: root
        mode: 0644
      when: svclb_ips | length > 0

    - name: Start k3s service on master
      ansible.builtin.service:
        name: k3s.service
        state: started
        enabled: true

    - name: Ensure cluster is initialized
      ansible.builtin.wait_for:
        host: "{{ server }}"
        port: 6443
        state: started
        timeout: 300

- name: Get token
  ansible.builtin.slurp:
    src: /var/lib/rancher/k3s/server/node-token
  run_once: true
  delegate_to: "{{ (server in groups['k3s-server']) | ternary(server, inventory_hostname) }}"
  register: node_token

- name: Set token
  ansible.builtin.set_fact:
    token: "{{ node_token.content | b64decode }}"

- name: Configure k3s
  ansible.builtin.template:
    dest: /etc/rancher/k3s/config.yaml.d/01_default.yaml
    src: config/01_default.yaml.j2
    owner: root
    group: root
    mode: 0644

- name: Start k3s service
  ansible.builtin.service:
    name: k3s.service
    state: started
    enabled: true
  throttle: 1
